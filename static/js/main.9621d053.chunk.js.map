{"version":3,"sources":["components/AppHeader/AppHeader.tsx","components/AppFooter/AppFooter.tsx","conf.js","components/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppHeader","Header","className","theme","mode","defaultSelectedKeys","Item","key","to","AppFooter","Footer","style","textAlign","INSTAGRAM_AUTH_URL","Routes","Content","exact","path","type","size","href","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAsBeA,G,OAjBG,kBAChB,kBAAC,IAAOC,OAAR,KACE,yBAAKC,UAAU,cACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAAMH,UAAU,mBACzE,kBAAC,IAAKI,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,YAAT,YAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,aAAT,iBCPOC,EANG,kBAChB,kBAAC,IAAOC,OAAR,CAAeC,MAAO,CAAEC,UAAW,WAAnC,gD,iBCEWC,EAAkB,8DANN,kBAMM,yBAHJ,+CAGI,kBAJP,0BAIO,6BCahBC,EAdA,kBACb,kBAAC,IAAOC,QAAR,CAAgBb,UAAU,gBACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAQC,KAAK,UAAUC,KAAK,QAAQC,KAAMP,GAA1C,wBAIF,kBAAC,IAAD,CAAOI,KAAK,YAAZ,WACA,kBAAC,IAAD,CAAOA,KAAK,aAAZ,eCESI,MAVf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9621d053.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Layout } from 'antd';\nimport './AppHeader.scss';\n\nconst AppHeader = () => (\n  <Layout.Header>\n    <div className=\"main-logo\" />\n    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} className=\"main-logo--menu\">\n      <Menu.Item key=\"1\">\n        <Link to=\"/\">Home</Link>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <Link to=\"/profile\">Profile</Link>\n      </Menu.Item>\n      <Menu.Item key=\"3\">\n        <Link to=\"/post/add\">Add Post</Link>\n      </Menu.Item>\n    </Menu>\n  </Layout.Header>\n);\n\nexport default AppHeader;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nconst AppFooter = () => (\n  <Layout.Footer style={{ textAlign: 'center' }}>\n    Awesome App Â©2020 Created by Vladimir M.\n  </Layout.Footer>\n);\n\nexport default AppFooter;\n","const INSTAGRAM_APP_ID = '143746280237756';\nconst INSTAGRAM_SECRET = '25d3567fa849f8ba0c737d9e1ae27d5c';\nconst INSTAGRAM_SCOPE = 'user_profile,user_media';\nconst INSTAGRAM_REDIRECT = 'https://mrpuer.github.com/blog-training/auth';\nconst INTAGRAM_TOKEN =\n  'IGQVJVUDN6R3c5OVd4VDBEajBDUGJ0Uk84OTMxakN5cWVwbWx1QWt4c0ZAadWgybXgzaFpBTndZAY3JfRDFtdDRaUFdlSjZAJUmh0SHhvX2V6OU5YMEVINFpEd0dCRHhqWElRZAkxzbktheXdmb000WkJHVwZDZD';\nexport const INSTAGRAM_AUTH_URL = `https://api.instagram.com/oauth/authorize?client_id=${INSTAGRAM_APP_ID}&redirect_uri=${INSTAGRAM_REDIRECT}&scope=${INSTAGRAM_SCOPE}&response_type=code&hl=en`;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Button, Layout } from 'antd';\nimport { INSTAGRAM_AUTH_URL } from '../conf';\n\nconst Routes = () => (\n  <Layout.Content className=\"main-content\">\n    <Switch>\n      <Route exact path=\"/\">\n        <Button type=\"primary\" size=\"large\" href={INSTAGRAM_AUTH_URL}>\n          Authorize Instagram\n        </Button>\n      </Route>\n      <Route path=\"/profile\">Profile</Route>\n      <Route path=\"/post/add\">Add Post</Route>\n    </Switch>\n  </Layout.Content>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AppFooter from './components/AppFooter/AppFooter';\nimport Routes from './components/Routes';\n\nfunction App() {\n  return (\n    <Router basename='/'>\n      <AppHeader />\n      <Routes />\n      <AppFooter />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '/', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}